{
  "id": "rest-apis.md#0",
  "post_urls": [
    "https://tds.s-anand.net/#/rest-apis.md",
    "https://tds.s-anand.net/#/../rest-apis.md"
  ],
  "content": "## REST APIs\n\nREST (Representational State Transfer) APIs are the standard way to build web services that allow different systems to communicate over HTTP. They use standard HTTP methods and JSON for data exchange. Watch this comprehensive introduction to REST APIs (52 min):\n\n[! [REST API Crash Course - Introduction + Full Python API Tutorial (52)](https://i.ytimg.com/vi_webp/qbLc5a9jdXo/sddefault.webp)](https://youtu.be/qbLc5a9jdXo)\n\nKey Concepts:\n\n1. **HTTP Methods**\n   - `GET`: Retrieve data\n   - `POST`: Create new data\n   - `PUT/PATCH`: Update existing data\n   - `DELETE`: Remove data\n2. **Status Codes**\n   - `2xx`: Success (200 OK, 201 Created)\n   - `4xx`: Client errors (400 Bad Request, 404 Not Found)\n   - `5xx`: Server errors (500 Internal Server Error)\n\nHere's a minimal REST API using FastAPI. Run this `server.py` script via `uv run server.py`:\n\n```python\n# /// script\n# requires-python = \">=3.13\"\n# dependencies = [\n#     \"fastapi\",\n#     \"uvicorn\",\n# ]\n# ///\nfrom fastapi import FastAPI, HTTPException\nfrom typing import Dict, List\n\napp = FastAPI()\n\n# Create a list of items that will act like a database\nitems: List[Dict[str, float | int | str]] = []\n\n# Create a GET endpoint that returns all items\n@app.get(\"/items\")\nasync def get_items() -> List[Dict[str, float | int | str]]:\n    return items\n\n# Create a GET endpoint that returns a specific item by ID\n@app.get(\"/items/{item_id}\")\nasync def get_item(item_id: int) -> Dict[str, float | int | str]:\n    if item := next((i for i in items if i[\"id\"] == item_id), None):\n        return item\n    raise HTTPException(status_code=404, detail=\"Item not found\")\n\n# Create a POST endpoint that creates a new item\n@app.post(\"/items\")\nasync def create_item(item: Dict[str, float | str]) -> Dict[str, float | int | str]:\n    new_item = {\"id\": len(items) + 1, \"name\": item[\"name\"], \"price\": float(item[\"price\"])}\n    items.append(new_item)\n    return new_item\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n```\n\nTest the API with curl:\n\n```bash\n# Get all items\ncurl http://localhost:8000/items\n\n# Create an item\ncurl -X POST http://localhost:8000/items \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"Book\", \"price\": 29.99}'\n\n# Get specific item\ncurl http://localhost:8000/items/1\n```\n\nBest Practices:\n\n1. **Use Nouns for Resources**\n   - Good: `/users`, `/posts`\n   - Bad: `/getUsers`, `/createPost`\n2. **Version Your API**\n   ```\n   /api/v1/users\n   /api/v2/users\n   ```\n3. **Handle Errors Consistently**\n   ```python\n   {\n     \"error\": \"Not Found\",\n     \"message\": \"User 123 not found\",\n     \"status_code\": 404\n   }\n   ```\n4. **Use Query Parameters for Filtering**\n   ```\n   /api/posts?status=published&category=tech\n   ```\n5. **Implement Pagination**\n   ```\n   /api/posts?page=2&limit=10\n   ```\n\nTools:\n\n- [Postman](https://www.postman.com/): API testing and documentation\n- [Swagger/OpenAPI](https://swagger.io/): API documentation\n- [HTTPie](https://httpie.io/): Modern command-line HTTP client\n- [JSON Schema](https://json-schema.org/): API request/response validation\n\nLearn more about REST APIs:\n\n- [REST API Design Best Practices](https://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/)\n- [Microsoft REST API Guidelines](https://github.com/microsoft/api-guidelines)\n- [Google API Design Guide](https://cloud.google.com/apis/design)"
}