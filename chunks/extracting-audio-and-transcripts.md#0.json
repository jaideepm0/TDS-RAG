{
  "id": "extracting-audio-and-transcripts.md#0",
  "post_urls": [
    "https://tds.s-anand.net/#/extracting-audio-and-transcripts.md",
    "https://tds.s-anand.net/#/../extracting-audio-and-transcripts.md"
  ],
  "content": "## Extracting Audio and Transcripts\n\n## Media Processing: FFmpeg\n\n[FFmpeg](https://ffmpeg.org/) is the standard command-line tool for processing video and audio files. It's essential for data scientists working with media files for:\n\n- Extracting audio/video for machine learning\n- Converting formats for web deployment\n- Creating visualizations and presentations\n- Processing large media datasets\n\nBasic Operations:\n\n```bash\n# Basic conversion\nffmpeg -i input.mp4 output.avi\n\n# Extract audio\nffmpeg -i input.mp4 -vn output.mp3\n\n# Convert format without re-encoding\nffmpeg -i input.mkv -c copy output.mp4\n\n# High quality encoding (crf: 0-51, lower is better)\nffmpeg -i input.mp4 -preset slower -crf 18 output.mp4\n```\n\nCommon Data Science Tasks:\n\n```bash\n# Extract frames for computer vision\nffmpeg -i input.mp4 -vf \"fps=1\" frames_%04d.png    # 1 frame per second\nffmpeg -i input.mp4 -vf \"select='eq(n,0)'\" -vframes 1 first_frame.jpg\n\n# Create video from image sequence\nffmpeg -r 1/5 -i img%03d.png -c:v libx264 -vf fps=25 output.mp4\n\n# Extract audio for speech recognition\nffmpeg -i input.mp4 -ar 16000 -ac 1 audio.wav      # 16kHz mono\n\n# Trim video/audio for training data\nffmpeg -ss 00:01:00 -i input.mp4 -t 00:00:30 -c copy clip.mp4\n```\n\nProcessing Multiple Files:\n\n```bash\n# Concatenate videos (first create files.txt with list of files)\necho \"file 'input1.mp4'\nfile 'input2.mp4'\" > files.txt\nffmpeg -f concat -i files.txt -c copy output.mp4\n\n# Batch process with shell loop\nfor f in *.mp4; do\n    ffmpeg -i \"$f\" -vn \"audio/${f%.mp4}.wav\"\ndone\n```\n\nData Analysis Features:\n\n```bash\n# Get media file information\nffprobe -v quiet -print_format json -show_format -show_streams input.mp4\n\n# Display frame metadata\nffprobe -v quiet -print_format json -show_frames input.mp4\n\n# Generate video thumbnails\nffmpeg -i input.mp4 -vf \"thumbnail\" -frames:v 1 thumb.jpg\n```\n\nWatch this introduction to FFmpeg (12 min):\n\n[! [FFmpeg in 12 Minutes](https://i.ytimg.com/vi_webp/MPV7JXTWPWI/sddefault.webp)](https://youtu.be/MPV7JXTWPWI)\n\nTools:\n\n- [ffmpeg.lav.io](https://ffmpeg.lav.io/): Interactive command builder\n- [FFmpeg Explorer](https://ffmpeg.guide/): Visual FFmpeg command generator\n- [FFmpeg Buddy](https://evanhahn.github.io/ffmpeg-buddy/): Simple command generator\n\nTips:\n\n1. Use `-c copy` when possible to avoid re-encoding\n2. Monitor progress with `-progress pipe:1`\n3. Use `-hide_banner` to reduce output verbosity\n4. Test commands with small clips first\n5. Use hardware acceleration when available (-hwaccel auto)\n\nError Handling:\n\n```bash\n# Validate file before processing\nffprobe input.mp4 2>&1 | grep \"Invalid\"\n\n# Continue on errors in batch processing\nffmpeg -i input.mp4 output.mp4 -xerror\n\n# Get detailed error information\nffmpeg -v error -i input.mp4 2>&1 | grep -A2 \"Error\"\n```\n\n<!-- Assessment: Share output of `ffprobe -v quiet -print_format json -show_format {video}` -->\n<!-- Assessment: Share output of `ffmpeg -i {video} -vf \"select='eq(n,0)'\" -vframes 1 {email}.jpg` -->\n\n## Media tools: yt-dlp\n\n[yt-dlp](https://github.com/yt-dlp/yt-dlp) is a feature-rich command-line tool for downloading audio/video from thousands of sites. It's particularly useful for extracting audio and transcripts from videos. Install using your package manager:\n\n```bash\n# macOS\nbrew install yt-dlp\n\n# Linux\ncurl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o ~/.local/bin/yt-dlp\nchmod a+rx ~/.local/bin/yt-dlp\n\n# Windows\nwinget install yt-dlp\n```\n\nCommon operations for extracting audio and transcripts:\n\n```bash\n# Download audio only at lowest quality suitable for speech\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       \"https://www.youtube.com/watch?v=VIDEO_ID\"\n\n# Download auto-generated subtitles\nyt-dlp --write-auto-sub \\\n       --skip-download \\\n       --sub-format \"srt\" \\\n       \"https://www.youtube.com/watch?v=VIDEO_ID\"\n\n# Download both audio and subtitles with custom output template\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       --write-auto-sub \\\n       --sub-format \"srt\" \\\n       -o \"%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/watch?v=VIDEO_ID\"\n\n# Download entire playlist's audio\nyt-dlp -f \"ba[abr<50]/worstaudio\" \\\n       --extract-audio \\\n       --audio-format mp3 \\\n       --audio-quality 32k \\\n       -o \"%(playlist_index)s-%(title)s.%(ext)s\" \\\n       \"https://www.youtube.com/playlist?list=PLAYLIST_ID\"\n```\n\nFor Python integration:\n\n```python\n# /// script\n# requires-python = \">=3.9\"\n# dependencies = [\"yt-dlp\"]\n# ///\n\nimport yt_dlp\n\ndef download_audio(url: str) -> None:\n    \"\"\"Download audio at speech-optimized quality.\"\"\" ydl_opts = {\n        'format': 'ba[abr<50]/worstaudio',\n        'postprocessors': [{\n            'key': 'FFmpegExtractAudio',\n            'preferredcodec': 'mp3',\n            'preferredquality': '32'\n        }]\n    }\n\n    with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n        ydl.download([url])\n\n# Example usage\ndownload_audio('https://www.youtube.com/watch?v=VIDEO_ID')\n```\n\nTools:\n\n- [ffmpeg](https://ffmpeg.org/): Required for audio extraction and conversion\n- [whisper](https://github.com/openai/whisper): Can be used with yt-dlp for speech-to-text\n- [gallery-dl](https://github.com/mikf/gallery-dl): Alternative for image-focused sites\n\nNote: Always respect copyright and terms of service when downloading content. ## Whisper transcription\n\n[Faster Whisper](https://github.com/SYSTRAN/faster-whisper) is a highly optimized implementation of OpenAI's [Whisper model](https://github.com/openai/whisper), offering up to 4x faster transcription while using less memory. You can install it via:\n\n- `pip install faster-whisper`\n- [Download Windows Standalone](https://github.com/Purfview/whisper-standalone-win/releases)\n\nHere's a basic usage example:\n\n```bash\nfaster-whisper-xxl \"video.mp4\" --model medium --language en\n```\n\nHere's my recommendation for transcribing videos. This saves the output in JSON as well as SRT format in the source directory. ```bash\nfaster-whisper-xxl --print_progress --output_dir source --batch_recursive \\\n                   --check_files --standard --output_format json srt \\\n                   --model medium --language en $FILE\n```\n\n- `--model`: The OpenAI Whisper model to use. You can choose from:\n  - `tiny`: Fastest but least accurate\n  - `base`: Good for simple audio\n  - `small`: Balanced speed/accuracy\n  - `medium`: Recommended default\n  - `large-v3`: Most accurate but slowest\n- `--output_format`: The output format to use. You can pick multiple formats from:\n  - `json`: Has the most detailed information including timing, text, quality, etc. - `srt`: A popular subtitle format. You can use this in YouTube, for example. - `vtt`: A modern subtitle format. - `txt`: Just the text transcript\n- `--output_dir`: The directory to save the output files. `source` indicates the source directory, i.e. where the input `$FILE` is\n- `--language`: The language of the input file. If you don't specify it, it analyzes the first 30 seconds to auto-detect. You can speed it up by specifying it. Run `faster-whisper-xxl --help` for more options. ## Gemini transcription\n\nThe [Gemini](https://gemini.google.com/) models from Google are notable in two ways:\n\n1. They have a _huge_ input context window. Gemini 2.0 Flash can accept 1M tokens, for example. 2. They can handle audio input. This allows us to use Gemini to transcribe audio files. LLMs are not good at transcribing audio _faithfully_. They tend to correct errors and meander from what was said. But they are intelligent. That enables a few powerful workflows. Here are some examples:\n\n1. **Transcribe into other languages**. Gemini will handle the transcription and translation in a single step. 2. **Summarize audio transcripts**. For example, convert a podcast into a tutorial, or a meeting recording into actions. 3. **Legal Proceeding Analysis**. Extract case citations, dates, and other details from a legal debate. 4. **Medical Consultation Summary**. Extract treatments, medications, details of next visit, etc. from a medical consultation. Here's how to use Gemini to transcribe audio files. 1. Get a [Gemini API key](https://aistudio.google.com/app/apikey) from Google AI Studio. 2. Set the `GEMINI_API_KEY` environment variable to the API key. 3. Set the `MP3_FILE` environment variable to the path of the MP3 file you want to transcribe. 4. Run this code:\n   ```bash\n   curl -X POST https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-002:streamGenerateContent?alt=sse \\\n     -H \"X-Goog-API-Key: $GEMINI_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d \"$(cat << EOF\n   {\n     \"contents\": [\n       {\n         \"role\": \"user\",\n         \"parts\": [\n           {\n             \"inline_data\": {\n               \"mime_type\": \"audio/mp3\",\n               \"data\": \"$(base64 --wrap=0 $MP3_FILE)\"\n             }\n           },\n           {\"text\": \"Transcribe this\"}\n         ]\n       }\n     ]\n   }\n   EOF\n   )\"\n   ```"
}