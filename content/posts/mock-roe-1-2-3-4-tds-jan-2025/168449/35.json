{"id": 600380, "name": "Andrew David", "username": "23f1002382", "avatar_template": "/user_avatar/discourse.onlinedegree.iitm.ac.in/23f1002382/{size}/68945_2.png", "created_at": "2025-02-26T15:18:23.855Z", "cooked": "<p><span class=\"mention\">@all</span><br>\nQ: You are the operations manager for World Courier. You are trying to find the shortest path between <code>Doha</code> and <code>Muscat</code>.</p>\n<p>World Courier has a fleet of aircraft that can fly directly between specific cities. The distance between two cities is the <a href=\"https://pypi.org/project/haversine/\" rel=\"noopener nofollow ugc\">Haversine distance</a>.</p>\n<p>What is the sequence of cities that you should fly to minimize the total distance traveled?</p>\n<p>Write the answer as a sequence of cities separated by commas.</p>\n<pre><code class=\"lang-auto\">HTML2= \"\"\"\"\n&lt;table class=\"table\"&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;City&lt;/th&gt;\n            &lt;th&gt;Latitude&lt;/th&gt;\n            &lt;th&gt;Longitude&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          &lt;!--?lit$901276210$--&gt;&lt;!----&gt;&lt;tr&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;New York&lt;/td&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;40.7128&lt;/td&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;-74.006&lt;/td&gt;\n              &lt;/tr&gt;&lt;!----&gt;&lt;!----&gt;&lt;tr&gt;\n                &lt;td&gt;&lt;!--?lGET DATA FROM QUESTION\n              &lt;/tr&gt;&lt;!----&gt;\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n\"\"\"\nHTML = \"\"\"&lt;table class=\"table\"&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;From&lt;/th&gt;\n            &lt;th&gt;To&lt;/th&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          &lt;!--?lit$901276210$--&gt;&lt;!----&gt;&lt;tr&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;New York&lt;/td&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;London&lt;/td&gt;\n              &lt;/tr&gt;&lt;!----&gt;&lt;!----&gt;&lt;tr&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;Tokyo&lt;/td&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;Sydney&lt;/td&gt;\n              &lt;/tr&gt;&lt;!----&gt;&lt;!----&gt;&lt;tr&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;Paris&lt;/td&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;Berlin&lt;/td&gt;\n              &lt;/tr&gt;&lt;!----&gt;&lt;!----&gt;&lt;tr&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;Dubai&lt;/td&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;Mumbai&lt;/td&gt;\n              &lt;/tr&gt;&lt;!----&gt;&lt;!----&gt;&lt;tr&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;San Francisco&lt;/td&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;Tokyo&lt;/td&gt;\n              &lt;/tr&gt;&lt;!----&gt;&lt;!----&gt;&lt;tr&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;Toronto&lt;/td&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;New York&lt;/td&gt;\n              &lt;/tr&gt;&lt;!----&gt;&lt;!----&gt;&lt;tr&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;Shanghai&lt;/td&gt;\n                &lt;td&gt;&lt;!--?lit$901276210$--&gt;Singapore&lt;/td&gt;\n              &lt;/tr&gt;&lt;!----&gt;...............GET DATA FROM QUESTION\n              &lt;/tr&gt;&lt;!----&gt;\n        &lt;/tbody&gt;\n      &lt;/table&gt;\"\"\"\nimport pandas as pd\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(HTML, \"html.parser\")\n\n# Extract table rows\nrows = []\nfor tr in soup.find_all(\"tr\"):\n    cells = [td.get_text(strip=True) for td in tr.find_all(\"td\")]\n    if cells:  # Ensure the row is not empty\n        rows.append(cells)\n\n# Convert extracted data into a pandas DataFrame\ndf = pd.DataFrame(rows, columns=[\"From\", \"To\"])\n\n\nsoup = BeautifulSoup(HTML2, \"html.parser\")\nrows = []\nfor tr in soup.find_all(\"tr\"):\n    cells = [td.get_text(strip=True) for td in tr.find_all(\"td\")]\n    if cells:  # Ensure the row is not empty\n        rows.append(cells)\n\n# Convert extracted data into a pandas DataFrame\ndf2 = pd.DataFrame(rows, columns=[\"City\", \"Latitude\",\"Longitude\"])\nimport networkx as nx\nfrom math import radians, sin, cos, sqrt, atan2\n\n\ncities_df = df2\n\n\nflights_df = df\ncities_df[\"Latitude\"] = pd.to_numeric(cities_df[\"Latitude\"])\ncities_df[\"Longitude\"] = pd.to_numeric(cities_df[\"Longitude\"])\n\n# Step 3: Define Haversine Distance Function\ndef haversine(lat1, lon1, lat2, lon2):\n    R = 6371  # Earth radius in km\n    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])\n    dlat, dlon = lat2 - lat1, lon2 - lon1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    return 2 * R * atan2(sqrt(a), sqrt(1 - a))\n\n# Step 4: Build Graph with NetworkX\nG = nx.Graph()\n\nfor _, row in flights_df.iterrows():\n    city1, city2 = row[\"From\"], row[\"To\"]\n    \n    lat1, lon1 = cities_df[cities_df[\"City\"] == city1][[\"Latitude\", \"Longitude\"]].values[0]\n    lat2, lon2 = cities_df[cities_df[\"City\"] == city2][[\"Latitude\", \"Longitude\"]].values[0]\n    \n    distance = haversine(lat1, lon1, lat2, lon2)\n    G.add_edge(city1, city2, weight=distance)\n\n# Step 5: Find Shortest Path using Dijkstra's Algorithm\nshortest_path = nx.shortest_path(G, source=\"Doha\", target=\"Muscat\", weight=\"weight\")\nshortest_distance = nx.shortest_path_length(G, source=\"Doha\", target=\"Muscat\", weight=\"weight\")\n\n# Output the result\nprint(\"Shortest Path:\", \" \u2192 \".join(shortest_path))\nprint(f\"Total Distance: {shortest_distance:.2f} km\")\n\n</code></pre>\n<p><span class=\"mention\">@all</span></p>", "post_number": 35, "post_type": 1, "posts_count": 80, "updated_at": "2025-02-26T15:18:23.855Z", "reply_count": 1, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 1, "reads": 101, "readers_count": 100, "score": 45.0, "yours": false, "topic_id": 168449, "topic_slug": "mock-roe-1-2-3-4-tds-jan-2025", "display_username": "Andrew David", "primary_group_name": "ds-students", "flair_name": "ds-students", "flair_url": null, "flair_bg_color": "", "flair_color": "", "flair_group_id": 294, "badges_granted": [], "version": 1, "can_edit": false, "can_delete": false, "can_recover": false, "can_see_hidden_post": false, "can_wiki": false, "link_counts": [{"url": "https://pypi.org/project/haversine/", "internal": false, "reflection": false, "title": "haversine \u00b7 PyPI", "clicks": 1}], "read": true, "user_title": null, "bookmarked": false, "actions_summary": [{"id": 2, "count": 1, "can_act": true}, {"id": 6, "can_act": true}, {"id": 3, "can_act": true}, {"id": 4, "can_act": true}, {"id": 8, "can_act": true}, {"id": 10, "can_act": true}, {"id": 7, "can_act": true}], "moderator": false, "admin": false, "staff": false, "user_id": 18297, "hidden": false, "trust_level": 1, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "post_url": "/t/mock-roe-1-2-3-4-tds-jan-2025/168449/35", "user_cakedate": "2023-06-05", "user_birthdate": "1904-01-05", "reactions": [{"id": "heart", "type": "emoji", "count": 1}], "current_user_reaction": null, "reaction_users_count": 1, "current_user_used_main_reaction": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false, "topic_accepted_answer": null}