{"id": 591069, "name": "SAKSHI PATHAK", "username": "Sakshi6479", "avatar_template": "/user_avatar/discourse.onlinedegree.iitm.ac.in/sakshi6479/{size}/110446_2.png", "created_at": "2025-02-03T19:44:12.086Z", "cooked": "<p>Q3 how to generate answer box ,I am not able to do it. kindly guide me with that.</p>\n<p>Q7 &amp; Q8 in these questions the problem is the same my app couldn\u2019t fetch the details from the file.</p>\n<pre><code class=\"lang-auto\">`from fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import BaseModel\nfrom typing import List\nimport openai\nfrom fastapi.responses import JSONResponse\nimport numpy as np\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Initialize FastAPI app\napp = FastAPI()\n\n# Add CORSMiddleware with more restrictive settings\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"http://localhost:3000\"],  # Allow only this specific origin\n    allow_credentials=True,\n    allow_methods=[\"POST\", \"OPTIONS\"],  # Allow only POST and OPTIONS methods\n    allow_headers=[\"Content-Type\", \"Authorization\"],  # Allow only specific headers\n)\n\n# OpenAI API key (use your own key)\nopenai.api_key = 'eyJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6IjI0ZjIwMDY3NDlAZHMuc3R1ZHkuaWl0bS5hYy5pbiJ9.tMJtqZrzRqREY7E3wsFMd9PkElXEbRBpCkb533ORGEU'\n\n# Request body model for /similarity endpoint\nclass SimilarityRequest(BaseModel):\n    docs: List[str]\n    query: str\n\n# Function to get embeddings (using OpenAI API)\ndef get_embedding(text: str):\n    response = openai.Embedding.create(\n        model=\"text-embedding-ada-003\",  # Use the correct model\n        input=text\n    )\n    return response['data'][0]['embedding']\n\n# POST /similarity endpoint\n@app.post(\"/similarity\")\nasync def similarity(request: SimilarityRequest):\n    docs = request.docs\n    query = request.query\n    query_embedding = get_embedding(query)\n    doc_embeddings = [get_embedding(doc) for doc in docs]\n    \n    # Cosine similarity\n    similarities = [cosine_similarity([query_embedding], [doc_embedding])[0][0] for doc_embedding in doc_embeddings]\n    ranked_docs = [docs[i] for i in np.argsort(similarities)[::-1]]\n    \n    return JSONResponse(content={\"matches\": ranked_docs[:3]})\n\n# Optionally, handle requests to the root (GET /)\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Welcome to the similarity API!\"}\n`\n</code></pre>\n<p>and for Q8</p>\n<pre><code class=\"lang-auto\">from fastapi import FastAPI\nfrom fastapi.responses import JSONResponse\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom typing import Dict, Any\nimport re\n\n# Create the FastAPI app\napp = FastAPI()\n\n# CORS configuration to allow any origin\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Allows all origins\n    allow_credentials=True,\n    allow_methods=[\"*\"],  # Allows all methods (GET, POST, etc.)\n    allow_headers=[\"*\"],  # Allows all headers\n)\ndef get_ticket_status(ticket_id: int) -&gt; Dict[str, Any]:\n    # Mock response for illustration purposes\n    return {\"ticket_id\": ticket_id, \"status\": \"open\"}\n\ndef schedule_meeting(date: str, time: str, meeting_room: str) -&gt; Dict[str, Any]:\n    # Mock response for illustration purposes\n    return {\"date\": date, \"time\": time, \"meeting_room\": meeting_room, \"status\": \"scheduled\"}\n\ndef get_expense_balance(employee_id: int) -&gt; Dict[str, Any]:\n    # Mock response for illustration purposes\n    return {\"employee_id\": employee_id, \"balance\": 1000.0}\n\ndef calculate_performance_bonus(employee_id: int, current_year: int) -&gt; Dict[str, Any]:\n    # Mock response for illustration purposes\n    return {\"employee_id\": employee_id, \"current_year\": current_year, \"bonus\": 500.0}\n\ndef report_office_issue(issue_code: int, department: str) -&gt; Dict[str, Any]:\n    # Mock response for illustration purposes\n    return {\"issue_code\": issue_code, \"department\": department, \"status\": \"reported\"}\nimport re\n\ndef extract_parameters(query: str) -&gt; Dict[str, Any]:\n    \"\"\"Extract parameters from the query string.\"\"\"\n    # Convert the query to lowercase for case-insensitive matching\n    query = query.strip().lower()\n\n    if match := re.match(r\"what is the status of ticket (\\d+)\\?\", query):\n        return {\n            \"name\": \"get_ticket_status\",\n            \"arguments\": {\"ticket_id\": int(match.group(1))}\n        }\n    elif match := re.match(r\"schedule a meeting on (\\d{4}-\\d{2}-\\d{2}) at (\\d{2}:\\d{2}) in (.+)\\.\", query):\n        return {\n            \"name\": \"schedule_meeting\",\n            \"arguments\": {\n                \"date\": match.group(1),\n                \"time\": match.group(2),\n                \"meeting_room\": match.group(3)\n            }\n        }\n    elif match := re.match(r\"show my expense balance for employee (\\d+)\\.\", query):\n        return {\n            \"name\": \"get_expense_balance\",\n            \"arguments\": {\"employee_id\": int(match.group(1))}\n        }\n    elif match := re.match(r\"calculate performance bonus for employee (\\d+) for (\\d{4})\\.\", query):\n        return {\n            \"name\": \"calculate_performance_bonus\",\n            \"arguments\": {\n                \"employee_id\": int(match.group(1)),\n                \"current_year\": int(match.group(2))\n            }\n        }\n    elif match := re.match(r\"report office issue (\\d+) for the (\\w+) department\\.\", query):\n        return {\n            \"name\": \"report_office_issue\",\n            \"arguments\": {\n                \"issue_code\": int(match.group(1)),\n                \"department\": match.group(2)\n            }\n        }\n    return {}\n\n@app.get(\"/execute\")\nasync def execute_query(q: str):\n    # Extract the function name and arguments from the query\n    result = extract_parameters(q)\n    \n    if not result:\n        return JSONResponse(content={\"error\": \"No matching function found for the query\"}, status_code=400)\n    \n    # Call the respective function\n    func_name = result[\"name\"]\n    arguments = result[\"arguments\"]\n    \n    # Call the function dynamically based on func_name\n    if func_name == \"get_ticket_status\":\n        response = get_ticket_status(**arguments)\n    elif func_name == \"schedule_meeting\":\n        response = schedule_meeting(**arguments)\n    elif func_name == \"get_expense_balance\":\n        response = get_expense_balance(**arguments)\n    elif func_name == \"calculate_performance_bonus\":\n        response = calculate_performance_bonus(**arguments)\n    elif func_name == \"report_office_issue\":\n        response = report_office_issue(**arguments)\n    \n    # Return the response in the requested format\n    return JSONResponse(content={\"name\": func_name, \"arguments\": arguments}, status_code=200)\n</code></pre>\n<p>Please kindly guide me with these problems as I am trying to do it since last 3 days. I am exhaust now, Please help me with this. <a class=\"mention\" href=\"/u/jivraj\">@Jivraj</a> , <a class=\"mention\" href=\"/u/carlton\">@carlton</a> , <a class=\"mention\" href=\"/u/saransh_saini\">@Saransh_Saini</a></p>", "post_number": 135, "post_type": 1, "posts_count": 149, "updated_at": "2025-02-06T05:55:37.251Z", "reply_count": 0, "reply_to_post_number": null, "quote_count": 0, "incoming_link_count": 8, "reads": 71, "readers_count": 70, "score": 53.6, "yours": false, "topic_id": 163247, "topic_slug": "ga3-large-language-models-discussion-thread-tds-jan-2025", "display_username": "SAKSHI PATHAK", "primary_group_name": "ds-students", "flair_name": "ds-students", "flair_url": null, "flair_bg_color": "", "flair_color": "", "flair_group_id": 294, "badges_granted": [], "version": 4, "can_edit": false, "can_delete": false, "can_recover": false, "can_see_hidden_post": false, "can_wiki": false, "read": true, "user_title": null, "bookmarked": false, "actions_summary": [{"id": 2, "can_act": true}, {"id": 6, "can_act": true}, {"id": 3, "can_act": true}, {"id": 4, "can_act": true}, {"id": 8, "can_act": true}, {"id": 10, "can_act": true}, {"id": 7, "can_act": true}], "moderator": false, "admin": false, "staff": false, "user_id": 40000, "hidden": false, "trust_level": 1, "deleted_at": null, "user_deleted": false, "edit_reason": null, "can_view_edit_history": true, "wiki": false, "post_url": "/t/ga3-large-language-models-discussion-thread-tds-jan-2025/163247/135", "user_cakedate": "2024-10-04", "reactions": [], "current_user_reaction": null, "reaction_users_count": 0, "current_user_used_main_reaction": false, "can_accept_answer": false, "can_unaccept_answer": false, "accepted_answer": false, "topic_accepted_answer": null}